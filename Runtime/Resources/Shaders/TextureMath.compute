#include "TextureCommon.hlsl"
#pragma kernel SetC
#pragma kernel SetCMasked
#pragma kernel SetCMaskedC
#pragma kernel AddC
#pragma kernel Add
#pragma kernel AddWeighted
#pragma kernel MultiplyC
#pragma kernel Multiply
#pragma kernel MultiplyCAddC
#pragma kernel MultiplyAddC
#pragma kernel Clamp
#pragma kernel Saturate

Texture2D<float4> SrcA;
Texture2D<float4> SrcB;
float4 ScalarA;
float4 ScalarB;
RWTexture2D<float4> Dst;

// TODO: Add saturate versions of ones that could overflow?

[numthreads(THREADSX, THREADSY, 1)]
void SetC(uint2 xy : SV_DispatchThreadID) {
	if (InRange(xy)) {
		Dst[xy] = ScalarA;
	}
}

[numthreads(THREADSX, THREADSY, 1)]
void SetCMaskedC(uint2 xy : SV_DispatchThreadID) {
	if (InRange(xy)) {
		Dst[xy] = lerp(SrcA[xy], ScalarA, ScalarB);
	}
}

// Sets dst to Scalar0 inside the mask
[numthreads(THREADSX, THREADSY, 1)]
void SetCMasked(uint2 xy : SV_DispatchThreadID) {
  if (InRange(xy)) {
    float2 uv = GetUV(xy);
    float alpha = SampleLinear(SrcB, uv).a;
    Dst[xy] = lerp(SrcA[xy], ScalarA, alpha);
  }
}

[numthreads(THREADSX, THREADSY, 1)]
void AddC(uint2 xy : SV_DispatchThreadID) {
	if (InRange(xy)) {
		Dst[xy] = SrcA[xy] + ScalarA;
	}
}

[numthreads(THREADSX, THREADSY, 1)]
void Add(uint2 xy : SV_DispatchThreadID) {
	if (InRange(xy)) {
		Dst[xy] = SrcA[xy] + SrcB[xy];
	}
}

[numthreads(THREADSX, THREADSY, 1)]
void AddWeighted(uint2 xy : SV_DispatchThreadID) {
	if (InRange(xy)) {
		Dst[xy] = SrcA[xy] * ScalarA + SrcB[xy] * ScalarB;
	}
}

[numthreads(THREADSX, THREADSY, 1)]
void MultiplyC(uint2 xy : SV_DispatchThreadID) {
	if (InRange(xy)) {
		Dst[xy] = SrcA[xy] * ScalarA;
	}
}

[numthreads(THREADSX, THREADSY, 1)]
void Multiply(uint2 xy : SV_DispatchThreadID) {
	if (InRange(xy)) {
		Dst[xy] = SrcA[xy] * SrcB[xy];
	}
}

[numthreads(THREADSX, THREADSY, 1)]
void MultiplyCAddC(uint2 xy : SV_DispatchThreadID) {
	if (InRange(xy)) {
		Dst[xy] = SrcA[xy] * ScalarA + ScalarB;
	}
}

[numthreads(THREADSX, THREADSY, 1)]
void MultiplyAddC(uint2 xy : SV_DispatchThreadID) {
	if (InRange(xy)) {
		Dst[xy] = SrcA[xy] * SrcB[xy] + ScalarB;
	}
}

[numthreads(THREADSX, THREADSY, 1)]
void Clamp(uint2 xy : SV_DispatchThreadID) {
	if (InRange(xy)) {
		Dst[xy] = clamp(SrcA[xy], ScalarA, ScalarB);
	}
}

[numthreads(THREADSX, THREADSY, 1)]
void Saturate(uint2 xy : SV_DispatchThreadID) {
	if (InRange(xy)) {
		Dst[xy] = saturate(SrcA[xy]);
	}
}
