#include "TextureCommon.hlsl"

Texture2D<float4> SrcA;
Texture2D<float4> SrcB;
float4 ScalarA;
float4 ScalarB;
float4 ScalarC;
float4 ScalarD;
RWTexture2D<float4> Dst;

// Circle signed-distance function
float CircleSdf(float2 xy, float2 center, float radius) {
    return distance(xy, center) - radius;
}

// Ellipse signed-distance function
float EllipseSdf(float2 xy, float2 center, float2 radius) {
    // See https://github.com/0xfaded/ellipse_demo/issues/1
    float2 p = abs(xy - center);

    float rdiff = radius.x * radius.x - radius.y * radius.y;

    // Initial guess
    float2 t = float2(0.70710678118f, 0.70710678118f); // Normalized
    float2 q = radius * t; // Closest point on ellipse

    for (int i = 0; i < 3; ++i) {
        float2 e = float2(rdiff, -rdiff) * t * t * t / radius;

        float2 qe = q - e;
        float2 pe = p - e;

        t = saturate((normalize(pe) * length(qe) + e) / radius);
        t = normalize(t);
        q = radius * t;
    }

    float df = distance(p, q); // unsigned distance function
    return sign(dot(p, p) - dot(q, q)) * df;
}

// Rectangle signed-distance function
float RectangleSdf(float2 xy, float2 p, float2 q) {
    float2 size = abs(p - q);
    float2 center = (p + q) * 0.5f;
    float2 delta = abs(xy - center) - size * 0.5f;
    return max(delta.x, delta.y);
}

// Line signed-distance function
float LineSdf(float2 xy, float2 p, float2 q, float width) {
    float halfWidth = width  * 0.5f;

    // Project uv onto the line p-q,, clamp to (0, 1)
    float2 pq = p - q;
    float lenSqr = dot(pq, pq);
    float t = lenSqr < 0.0000001f ? 0 : dot(xy - q, pq) / lenSqr;
    float2 closest = q + saturate(t) * pq;
    return distance(xy, closest) - halfWidth;
}

// Calculate color from signed-distance
float4 ColorFromSdf(float sdf, float4 bgColor, float4 fillColor,
                    float4 outlineColor, float outlineWidth) {

    // Magic that does antialiasing
    // distOuter = dist
    // distInner = dist + OutlineWidth
    //   distInner < 0  -->  FillColor
    //   distInner < 1  -->  lerp between FillColor and OutlineColor
    //   distOuter < 0  -->  OutlineColor
    //   distOuter < 1  -->  OutlineColor with alpha between 1 and 0
    //   distOuter > 1  -->  OutlineColor with alpha 0
    float4 color = lerp(fillColor, outlineColor, saturate(sdf + outlineWidth));
    color.a *= 1 - saturate(sdf);

    // Blend over bgColor
    color.rgb = lerp(bgColor.rgb, color.rgb, color.a);
    color.a = color.a + (1 - color.a) * bgColor.a;
    return color;
}

// Convenience function to pull out color and outline settings and pass to ColorFromSdf
float4 ColorFromSdf(float sdf, float4 bgColor) {
    float4 fillColor = ScalarA;
    float4 outlineColor = ScalarB;
    float outlineWidth = ScalarC.x;
    return ColorFromSdf(sdf, bgColor, fillColor, outlineColor, outlineWidth);

}

// Draw circle described by ScalarD (ctr.xy, rad)
#pragma kernel Circle
#pragma kernel CircleI
DEFKERNEL(Circle, (ColorFromSdf(CircleSdf(xy, ScalarD.xy, ScalarD.z), SrcA[xy])))
DEFKERNEL(CircleI, (ColorFromSdf(CircleSdf(xy, ScalarD.xy, ScalarD.z), Dst[xy])))

// Draw ellipse described by ScalarD (ctr.xy, rad.xy)
#pragma kernel Ellipse
#pragma kernel EllipseI
DEFKERNEL(Ellipse, (ColorFromSdf(EllipseSdf(xy, ScalarD.xy, ScalarD.zw), SrcA[xy])))
DEFKERNEL(EllipseI, (ColorFromSdf(EllipseSdf(xy, ScalarD.xy, ScalarD.zw), Dst[xy])))

// Draw rectangle described by ScalarD (min.xy, max.xy)
#pragma kernel Rectangle
#pragma kernel RectangleI
DEFKERNEL(Rectangle, (ColorFromSdf(RectangleSdf(xy, ScalarD.xy, ScalarD.zw), SrcA[xy])))
DEFKERNEL(RectangleI, (ColorFromSdf(RectangleSdf(xy, ScalarD.xy, ScalarD.zw), Dst[xy])))

// Draw line described by ScalarC.y (width) and ScalarD (min.xy, max.xy)
#pragma kernel Line
#pragma kernel LineI
DEFKERNEL(Line, (ColorFromSdf(LineSdf(xy, ScalarD.xy, ScalarD.zw, ScalarC.y), SrcA[xy])))
DEFKERNEL(LineI, (ColorFromSdf(LineSdf(xy, ScalarD.xy, ScalarD.zw, ScalarC.y), Dst[xy])))
