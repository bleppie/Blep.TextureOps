#include "TextureCommon.hlsl"

Texture2D<float4> SrcA;
Texture2D<float4> SrcB;
float4 ScalarA;
float4 ScalarB;
RWTexture2D<float4> Dst;

// TODO: Add saturate versions of ones that could overflow?

#pragma kernel SetC
[numthreads(THREADSX, THREADSY, 1)]
void SetC(uint2 xy : SV_DispatchThreadID) {
  if (InRange(xy)) {
    Dst[xy] = ScalarA;
  }
}

#pragma kernel SetCMaskedC
[numthreads(THREADSX, THREADSY, 1)]
void SetCMaskedC(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        Dst[xy] = lerp(SrcA[xy], ScalarA, ScalarB);
    }
}

#pragma kernel SetCMaskedCI
[numthreads(THREADSX, THREADSY, 1)]
void SetCMaskedCI(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        Dst[xy] = lerp(Dst[xy], ScalarA, ScalarB);
    }
}

// Sets dst to Scalar0 inside the mask
#pragma kernel SetCMasked
[numthreads(THREADSX, THREADSY, 1)]
void SetCMasked(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        float2 uv = GetUV(xy);
        float alpha = SampleLinear(SrcB, uv).a;
        Dst[xy] = lerp(SrcA[xy], ScalarA, alpha);
    }
}

// Sets dst to Scalar0 inside the mask
#pragma kernel SetCMaskedI
[numthreads(THREADSX, THREADSY, 1)]
void SetCMaskedI(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        float2 uv = GetUV(xy);
        float alpha = SampleLinear(SrcB, uv).a;
        Dst[xy] = lerp(Dst[xy], ScalarA, alpha);
    }
}

#pragma kernel AddC
[numthreads(THREADSX, THREADSY, 1)]
void AddC(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        Dst[xy] = SrcA[xy] + ScalarA;
    }
}

#pragma kernel AddCI
[numthreads(THREADSX, THREADSY, 1)]
void AddCI(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        Dst[xy] = Dst[xy] + ScalarA;
    }
}

#pragma kernel Add
[numthreads(THREADSX, THREADSY, 1)]
void Add(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        Dst[xy] = SrcA[xy] + SrcB[xy];
    }
}

#pragma kernel AddI
[numthreads(THREADSX, THREADSY, 1)]
void AddI(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        Dst[xy] = Dst[xy] + SrcB[xy];
    }
}

#pragma kernel AddWeighted
[numthreads(THREADSX, THREADSY, 1)]
void AddWeighted(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        Dst[xy] = SrcA[xy] * ScalarA + SrcB[xy] * ScalarB;
    }
}

#pragma kernel AddWeightedI
[numthreads(THREADSX, THREADSY, 1)]
void AddWeightedI(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        Dst[xy] = Dst[xy] * ScalarA + SrcB[xy] * ScalarB;
    }
}

#pragma kernel MultiplyC
[numthreads(THREADSX, THREADSY, 1)]
void MultiplyC(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        Dst[xy] = SrcA[xy] * ScalarA;
    }
}

#pragma kernel MultiplyCI
[numthreads(THREADSX, THREADSY, 1)]
void MultiplyCI(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        Dst[xy] = Dst[xy] * ScalarA;
    }
}

#pragma kernel Multiply
[numthreads(THREADSX, THREADSY, 1)]
void Multiply(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        Dst[xy] = SrcA[xy] * SrcB[xy];
    }
}

#pragma kernel MultiplyCAddC
[numthreads(THREADSX, THREADSY, 1)]
void MultiplyCAddC(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        Dst[xy] = SrcA[xy] * ScalarA + ScalarB;
    }
}

#pragma kernel MultiplyCAddCI
[numthreads(THREADSX, THREADSY, 1)]
void MultiplyCAddCI(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        Dst[xy] = Dst[xy] * ScalarA + ScalarB;
    }
}

#pragma kernel MultiplyCAddCSat
[numthreads(THREADSX, THREADSY, 1)]
void MultiplyCAddCSat(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        Dst[xy] = saturate(SrcA[xy] * ScalarA + ScalarB);
    }
}

#pragma kernel MultiplyCAddCSatI
[numthreads(THREADSX, THREADSY, 1)]
void MultiplyCAddCSatI(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        Dst[xy] = saturate(Dst[xy] * ScalarA + ScalarB);
    }
}

#pragma kernel Clamp
[numthreads(THREADSX, THREADSY, 1)]
void Clamp(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        Dst[xy] = clamp(SrcA[xy], ScalarA, ScalarB);
    }
}

#pragma kernel ClampI
[numthreads(THREADSX, THREADSY, 1)]
void ClampI(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        Dst[xy] = clamp(Dst[xy], ScalarA, ScalarB);
    }
}

#pragma kernel Saturate
[numthreads(THREADSX, THREADSY, 1)]
void Saturate(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        Dst[xy] = saturate(SrcA[xy]);
    }
}

#pragma kernel SaturateI
[numthreads(THREADSX, THREADSY, 1)]
void SaturateI(uint2 xy : SV_DispatchThreadID) {
    if (InRange(xy)) {
        Dst[xy] = saturate(Dst[xy]);
    }
}

/*
#define DEF(NAME, FUNC)                           \
  [numthreads(THREADSX, THREADSY, 1)]             \
  void NAME(uint2 xy : SV_DispatchThreadID) {     \
    if (InRange(xy)) {                            \
      Dst[xy] = _##FUNC(SrcA[xy]);                \
    }                                             \
  }                                               \
  [numthreads(THREADSX, THREADSY, 1)]             \
  void NAME##I(uint2 xy : SV_DispatchThreadID) {  \
    if (InRange(xy)) {                            \
      Dst[xy] = _##FUNC(Dst[xy]);                 \
    }                                             \
  }
*/
