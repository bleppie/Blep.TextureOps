#include "TextureCommon.hlsl"

Texture2D<float4> SrcA;
Texture2D<float4> SrcB;
float4 ScalarA;
float4 ScalarB;
RWTexture2D<float4> Dst;

// TODO: Add saturate versions of ones that could overflow?

// Image = Constant
#pragma kernel SetC
DEFKERNEL(SetC, ScalarA)

// Image = Constant using a constant (channel) mask
#pragma kernel SetCMaskedC
#pragma kernel SetCMaskedCI
DEFKERNEL(SetCMaskedC, (lerp(SrcA[xy], ScalarA, ScalarB)))
DEFKERNEL(SetCMaskedCI, (lerp(Dst[xy], ScalarA, ScalarB)))

// Image = Constant inside a mask
#pragma kernel SetCMasked
#pragma kernel SetCMaskedI
DEFKERNEL(SetCMasked, (lerp(SrcA[xy], ScalarA, SampleLinear(SrcB, GetUV(xy)).a)))
DEFKERNEL(SetCMaskedI, (lerp(Dst[xy], ScalarA, SampleLinear(SrcB, GetUV(xy)).a)))

// Image + Constant
#pragma kernel AddC
#pragma kernel AddCI
DEFKERNEL(AddC, (SrcA[xy] + ScalarA))
DEFKERNEL(AddCI, (Dst[xy] + ScalarA))

// Image1 + Image2
#pragma kernel Add
#pragma kernel AddI
DEFKERNEL(Add, (SrcA[xy] + SrcB[xy]))
DEFKERNEL(AddI, (Dst[xy] + SrcB[xy]))

// Image2 * weight1 + Image2 * weight2
#pragma kernel AddWeighted
#pragma kernel AddWeightedI
DEFKERNEL(AddWeighted, (SrcA[xy] * ScalarA + SrcB[xy] * ScalarB))
DEFKERNEL(AddWeightedI, (Dst[xy] * ScalarA + SrcB[xy] * ScalarB))

// Image * Constant
#pragma kernel MultiplyC
#pragma kernel MultiplyCI
DEFKERNEL(MultiplyC, (SrcA[xy] * ScalarA))
DEFKERNEL(MultiplyCI, (Dst[xy] * ScalarA))

// Image1 * Image2
#pragma kernel Multiply
#pragma kernel MultiplyI
DEFKERNEL(Multiply, (SrcA[xy] * SrcB[xy]))
DEFKERNEL(MultiplyI, (Dst[xy] * SrcB[xy]))

// Image * Constant1 + Constant2 (mad)
#pragma kernel MultiplyCAddC
#pragma kernel MultiplyCAddCI
DEFKERNEL(MultiplyCAddC, (mad(SrcA[xy], ScalarA, ScalarB)))
DEFKERNEL(MultiplyCAddCI, (mad(Dst[xy], ScalarA, ScalarB)))

// saturate(Image * Constant1 + Constant2)
#pragma kernel MultiplyCAddCSat
#pragma kernel MultiplyCAddCSatI
DEFKERNEL(MultiplyCAddCSat, (saturate(mad(SrcA[xy], ScalarA, ScalarB))))
DEFKERNEL(MultiplyCAddCSatI, (saturate(mad(Dst[xy], ScalarA, ScalarB))))

// clamp(Image, Constant1, Constant2)
#pragma kernel Clamp
#pragma kernel ClampI
DEFKERNEL(Clamp, (clamp(SrcA[xy], ScalarA, ScalarB)))
DEFKERNEL(ClampI, (clamp(Dst[xy], ScalarA, ScalarB)))

// saturate(Image)
#pragma kernel Saturate
#pragma kernel SaturateI
DEFKERNEL(Saturate, (saturate(SrcA[xy])))
DEFKERNEL(SaturateI, (saturate(Dst[xy])))

// sqrt(Image)
#pragma kernel Sqrt
#pragma kernel SqrtI
DEFKERNEL(Sqrt, (sqrt(SrcA[xy])))
DEFKERNEL(SqrtI, (sqrt(Dst[xy])))

