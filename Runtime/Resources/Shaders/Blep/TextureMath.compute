#include "TextureCommon.hlsl"

// TODO: Add saturate versions of ones that could overflow?

// Image = Constant
#pragma kernel SetC
DEFKERNEL(SetC, ScalarA)

// Image = Constant inside a mask
#pragma kernel SetCMaskedI
DEFKERNEL(SetCMaskedI, (lerp(Dst[xy], ScalarA, SampleLinear(SrcB, GetUV(xy)).r)))

// 1 - Image
#pragma kernel Invert
#pragma kernel InvertI
DEFKERNEL(Invert, (1 - SrcA[xy]))
DEFKERNEL(InvertI, (1 - Dst[xy]))

// Image + Constant
#pragma kernel AddC
#pragma kernel AddCI
  DEFKERNEL(AddC, (SrcA[xy] + ScalarA))
  DEFKERNEL(AddCI, (Dst[xy] + ScalarA))

// Image1 + Image2
#pragma kernel Add
#pragma kernel AddI
DEFKERNEL(Add, (SrcA[xy] + SrcB[xy]))
DEFKERNEL(AddI, (Dst[xy] + SrcB[xy]))

// Image * Constant
#pragma kernel MultiplyC
#pragma kernel MultiplyCI
DEFKERNEL(MultiplyC, (SrcA[xy] * ScalarA))
DEFKERNEL(MultiplyCI, (Dst[xy] * ScalarA))

// Image1 * Image2
#pragma kernel Multiply
#pragma kernel MultiplyI
DEFKERNEL(Multiply, (SrcA[xy] * SrcB[xy]))
DEFKERNEL(MultiplyI, (Dst[xy] * SrcB[xy]))

// Image * Constant1 + Constant2
#pragma kernel MultiplyCAddC
#pragma kernel MultiplyCAddCI
DEFKERNEL(MultiplyCAddC, (mad(SrcA[xy], ScalarA, ScalarB)))
DEFKERNEL(MultiplyCAddCI, (mad(Dst[xy], ScalarA, ScalarB)))

// lerp(Image1, Image2, t)
#pragma kernel Lerp
#pragma kernel LerpI
DEFKERNEL(Lerp, (lerp(SrcA[xy], SrcB[xy], ScalarA)))
DEFKERNEL(LerpI, (lerp(Dst[xy], SrcB[xy], ScalarA)))

// Image1 * weight1 + Image2 * weight2
#pragma kernel AddWeighted
#pragma kernel AddWeightedI
DEFKERNEL(AddWeighted, (SrcA[xy] * ScalarA + SrcB[xy] * ScalarB))
  DEFKERNEL(AddWeightedI, (Dst[xy] * ScalarA + SrcB[xy] * ScalarB))

// clamp(Image, Constant1, Constant2)
#pragma kernel Clamp
#pragma kernel ClampI
DEFKERNEL(Clamp, (clamp(SrcA[xy], ScalarA, ScalarB)))
DEFKERNEL(ClampI, (clamp(Dst[xy], ScalarA, ScalarB)))

// min(Image1, Image2)
#pragma kernel Min
#pragma kernel MinI
DEFKERNEL(Min, (min(SrcA[xy], SrcB[xy])))
DEFKERNEL(MinI, (min(Dst[xy], SrcB[xy])))

// max(Image1, Image2)
#pragma kernel Max
#pragma kernel MaxI
DEFKERNEL(Max, (max(SrcA[xy], SrcB[xy])))
DEFKERNEL(MaxI, (max(Dst[xy], SrcB[xy])))

// saturate(Image)
#pragma kernel Saturate
#pragma kernel SaturateI
DEFKERNEL(Saturate, (saturate(SrcA[xy])))
DEFKERNEL(SaturateI, (saturate(Dst[xy])))

